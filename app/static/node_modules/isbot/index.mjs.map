{"version":3,"file":"index.mjs.map","sources":["src/amend/index.js","src/isbot/index.js","src/index.js"],"sourcesContent":["/**\n * Mutate given list of patter strings\n * @param {string[]} list\n * @returns {string[]}\n */\nexport function amend (list) {\n  try {\n    // Risk: Uses lookbehind assertion, avoid breakage in parsing by using RegExp constructor\n    new RegExp('(?<! cu)bot').test('dangerbot') // eslint-disable-line prefer-regex-literals\n  } catch (error) {\n    // Skip regex fixes\n    return list\n  }\n\n  // Addresses: Cubot device\n  list.splice(list.lastIndexOf('bot'), 1)\n  list.push('(?<! cu)bot')\n\n  // Addresses: Android webview\n  list.splice(list.lastIndexOf('google'), 1)\n  list.push('(?<! (channel\\\\/|google\\\\/))google(?!(app|\\\\/google))')\n\n  // Addresses: Yandex browser\n  list.splice(list.lastIndexOf('search'), 1)\n  list.push('(?<! (ya|yandex))search')\n\n  // Addresses: libhttp browser\n  list.splice(list.lastIndexOf('http'), 1)\n  list.push('(?<!(lib))http')\n\n  // Addresses: java based browsers\n  list.splice(list.lastIndexOf('java'), 1)\n  list.push('java(?!;)')\n\n  // Addresses: Mozilla nightly build https://github.com/mozilla-mobile/android-components/search?q=MozacFetch\n  list.splice(list.lastIndexOf('fetch'), 1)\n  list.push('(?<!(mozac))fetch')\n\n  return list\n}\n","import list from '../list.json'\nimport { amend } from '../amend/index.js'\n\namend(list)\n\nconst flags = 'i'\n\n/**\n * Test user agents for matching patterns\n */\nexport class Isbot {\n  /**\n   * @type {string[]}\n   */\n  #list;\n\n  /**\n   * @type {RegExp}\n   */\n  #pattern;\n\n  constructor (patterns) {\n    this.#list = patterns || list.slice()\n    this.#update()\n\n    const isbot = ua => this.test(ua)\n\n    return Object.defineProperties(\n      isbot,\n      Object.getOwnPropertyNames(Isbot.prototype).filter(\n        prop => !['constructor'].includes(prop)\n      ).reduce(\n        (accumulator, prop) => Object.assign(\n          accumulator,\n          { [prop]: { get: () => this[prop].bind(this) } }\n        ),\n        {}\n      )\n    )\n  }\n\n  /**\n   * Recreate the pattern from rules list\n   */\n  #update () {\n    this.#pattern = new RegExp(\n      this.#list.join('|'),\n      flags\n    )\n  }\n\n  /**\n   * Find the first index of an existing rule or -1 if not found\n   * @param  {string} rule\n   * @returns {number}\n   */\n  #index (rule) {\n    return this.#list.indexOf(rule.toLowerCase())\n  }\n\n  /**\n   * Match given string against out pattern\n   * @param  {string} ua User Agent string\n   * @returns {boolean}\n   */\n  test (ua) {\n    return Boolean(ua) && this.#pattern.test(ua)\n  }\n\n  /**\n   * Get the match for strings' known crawler pattern\n   * @param  {string} ua User Agent string\n   * @returns {string|null}\n   */\n  find (ua = '') {\n    const match = ua.match(this.#pattern)\n    return match && match[0]\n  }\n\n  /**\n   * Get the patterns that match user agent string if any\n   * @param  {string} ua User Agent string\n   * @returns {string[]}\n   */\n  matches (ua = '') {\n    return this.#list.filter(\n      entry => new RegExp(entry, flags).test(ua)\n    )\n  }\n\n  /**\n   * Clear all patterns that match user agent\n   * @param  {string} ua User Agent string\n   * @returns {void}\n   */\n  clear (ua = '') {\n    this.exclude(this.matches(ua))\n  }\n\n  /**\n   * Extent patterns for known crawlers\n   * @param  {string[]} filters\n   * @returns {void}\n   */\n  extend (filters = []) {\n    [].push.apply(\n      this.#list,\n      filters.filter(\n        rule => this.#index(rule) === -1\n      ).map(\n        filter => filter.toLowerCase()\n      )\n    )\n    this.#update()\n  }\n\n  /**\n   * Exclude patterns from bot pattern rule\n   * @param  {string[]} filters\n   * @returns {void}\n   */\n  exclude (filters = []) {\n    let { length } = filters\n    while (length--) {\n      const index = this.#index(filters[length])\n      if (index > -1) {\n        this.#list.splice(index, 1)\n      }\n    }\n    this.#update()\n  }\n\n  /**\n   * Create a new Isbot instance using given list or self's list\n   * @param  {string[]} [list]\n   * @returns {Isbot}\n   */\n  spawn (list) {\n    return new Isbot(list || this.#list)\n  }\n}\n","import { Isbot } from './isbot/index.js'\n\nconst isbot = new Isbot()\n\nexport default isbot\n"],"names":["amend","list","RegExp","test","error","splice","lastIndexOf","push","flags","Isbot","patterns","slice","isbot","ua","Object","defineProperties","getOwnPropertyNames","prototype","filter","prop","includes","reduce","accumulator","assign","get","bind","Boolean","match","entry","exclude","matches","filters","apply","rule","map","toLowerCase","length","index","join","indexOf"],"mappings":"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"}